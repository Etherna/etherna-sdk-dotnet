// Copyright 2020-present Etherna SA
// This file is part of Etherna SDK .Net.
// 
// Etherna SDK .Net is free software: you can redistribute it and/or modify it under the terms of the
// GNU Lesser General Public License as published by the Free Software Foundation,
// either version 3 of the License, or (at your option) any later version.
// 
// Etherna SDK .Net is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
// without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
// See the GNU Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public License along with Etherna SDK .Net.
// If not, see <https://www.gnu.org/licenses/>.

using Etherna.Sdk.Credit.GenClients;
using Etherna.Sdk.Credit.Models;
using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;

namespace Etherna.Sdk.Internal.Clients
{
    public interface IEthernaInternalCreditClient
    {
        /// <summary>
        /// Get credit status for an user
        /// </summary>
        /// <param name="userAddress">The user address</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="EthernaCreditApiException">A server side error occurred.</exception>
        Task<UserCredit> GetUserCreditAsync(
            string userAddress,
            CancellationToken cancellationToken = default);

        /// <summary>
        /// Get logs generated by current service with a user
        /// </summary>
        /// <param name="userAddress">The user address</param>
        /// <param name="fromDate">Low date limit for query</param>
        /// <param name="toDate">High date limit for query</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Logs list from query</returns>
        /// <exception cref="EthernaCreditApiException">A server side error occurred.</exception>
        Task<IEnumerable<UserOpLog>> GetUserOpLogsAsync(
            string userAddress,
            DateTimeOffset? fromDate = null,
            DateTimeOffset? toDate = null,
            CancellationToken cancellationToken = default);

        /// <summary>
        /// Update the credit balance of an user by a given amount
        /// </summary>
        /// <param name="userAddress">The user address</param>
        /// <param name="amount">The amount to be updated. Positive for credit, negative for debit</param>
        /// <param name="reason">The update reason description</param>
        /// <param name="isApplied">True if credit update needs to be applied to user balance</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="EthernaCreditApiException">A server side error occurred.</exception>
        Task UpdateUserBalanceAsync(
            string userAddress,
            double amount,
            string reason,
            bool? isApplied = null,
            CancellationToken cancellationToken = default);
    }
}
