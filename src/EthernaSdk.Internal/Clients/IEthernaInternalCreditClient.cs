//   Copyright 2020-present Etherna SA
// 
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
// 
//       http://www.apache.org/licenses/LICENSE-2.0
// 
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.

using Etherna.Sdk.Common.GenClients.Credit;
using Etherna.Sdk.Common.Models;
using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;

namespace Etherna.Sdk.Internal.Clients
{
    public interface IEthernaInternalCreditClient
    {
        /// <summary>
        /// Get credit status for an user
        /// </summary>
        /// <param name="userAddress">The user address</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="EthernaCreditApiException">A server side error occurred.</exception>
        Task<UserCredit> GetUserCreditAsync(
            string userAddress,
            CancellationToken cancellationToken = default);

        /// <summary>
        /// Get logs generated by current service with a user
        /// </summary>
        /// <param name="userAddress">The user address</param>
        /// <param name="fromDate">Low date limit for query</param>
        /// <param name="toDate">High date limit for query</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Logs list from query</returns>
        /// <exception cref="EthernaCreditApiException">A server side error occurred.</exception>
        Task<IEnumerable<UserOpLog>> GetUserOpLogsAsync(
            string userAddress,
            DateTimeOffset? fromDate = null,
            DateTimeOffset? toDate = null,
            CancellationToken cancellationToken = default);

        /// <summary>
        /// Update the credit balance of an user by a given amount
        /// </summary>
        /// <param name="userAddress">The user address</param>
        /// <param name="amount">The amount to be updated. Positive for credit, negative for debit</param>
        /// <param name="reason">The update reason description</param>
        /// <param name="isApplied">True if credit update needs to be applied to user balance</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="EthernaCreditApiException">A server side error occurred.</exception>
        Task UpdateUserBalanceAsync(
            string userAddress,
            double amount,
            string reason,
            bool? isApplied = null,
            CancellationToken cancellationToken = default);
    }
}
